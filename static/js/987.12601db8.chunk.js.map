{"version":3,"file":"static/js/987.12601db8.chunk.js","mappings":"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","sources":["components/Phonebook/Phonebook.styled.js","redux/contacts/selectors.js","components/Phonebook/Phonebook.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactsList/ContactsList.styled.js","components/Loader/Loader.styled.js","components/Loader/Loader.js","components/ContactsList/ContactsList.js","pages/Contacts.js"],"sourcesContent":["import { Field, Form, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const StyledForm = styled(Form)`\n  width: 300px;\n  border: 1px solid black;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #f4f1f1;\n`;\n\nexport const StyledField = styled(Field)`\n  margin-left: 5px;\n  background-color: #e8edfc;\n  border-radius: 10px;\n  padding-left: 5px;\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  color: red;\n  margin-top: 5px;\n`;\n\nexport const Label = styled.label`\n  margin-top: 10px;\n`;\nexport const Button = styled.button`\n  margin-top: 10px;\n  margin-bottom: 10px;\n\n  border-radius: 10px;\n  &:hover {\n    background-color: #fff;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => {\n  return state.contacts.contacts;\n};\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Button,\n  Label,\n  StyledForm,\n  StyledField,\n  StyledErrorMessage,\n} from './Phonebook.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst InputSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(25, 'Too Long!')\n    .matches(\n      \"^[a-zA-Za-яА-Я]+(([' -][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$\",\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n  number: Yup.string()\n    .min(9, '9 digits required!')\n    .max(13, 'Less than 13 symbols!')\n    .matches(\n      /\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required'),\n});\n\nexport const Phonebook = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={InputSchema}\n      onSubmit={(values, actions) => {\n        const existingContact = contacts.find(\n          c =>\n            c.name.toLowerCase() === values.name.toLowerCase() ||\n            c.number === values.number\n        );\n        if (existingContact) {\n          alert('Contact already exists!');\n        } else {\n          dispatch(addContacts(values));\n        }\n        actions.resetForm();\n      }}\n    >\n      <StyledForm>\n        <Label>\n          Name\n          <StyledField name=\"name\" type=\"text\" placeholder=\"name\" />\n          <StyledErrorMessage component=\"div\" name=\"name\" />\n        </Label>\n        <Label>\n          Name\n          <StyledField name=\"number\" type=\"tel\" placeholder=\"phone\" />\n          <StyledErrorMessage component=\"div\" name=\"phone\" />\n        </Label>\n        <Button type=\"submit\">Submit</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  width: 300px;\n  border: 1px solid black;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #f4f1f1;\n  gap: 10px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n`;\n\nexport const Input = styled.input`\n  background-color: #e8edfc;\n  border-radius: 10px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Label, Input } from './Filter.styled';\n// import { filterAction } from 'redux/actions';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { filterAction } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        value={filter}\n        onChange={e => {\n          dispatch(filterAction(e.target.value));\n        }}\n      ></Input>\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 350px;\n  border: 1px solid black;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #f4f1f1;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  gap: 10px;\n`;\n\nexport const ListElem = styled.li``;\n\nexport const Button = styled.button`\n  margin-left: 10px;\n  border-radius: 10px;\n  &:hover {\n    background-color: #fff;\n  }\n`;\n","import { styled } from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { MagnifyingGlass } from 'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderWrapper>\n      <MagnifyingGlass\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"MagnifyingGlass-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"MagnifyingGlass-wrapper\"\n        glassColor=\"#c0efff\"\n        color=\"#0078d0\"\n      />\n    </LoaderWrapper>\n  );\n};\n","import {\n  List,\n  ListElem,\n  Button,\n} from 'components/ContactsList/ContactsList.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n  const visibleItems = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {visibleItems.length > 0 ? (\n        <List>\n          {visibleItems.map(({ id, name, number }) => {\n            return (\n              <ListElem key={id}>\n                {name}: {number}\n                <Button\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(deleteContact(id));\n                  }}\n                >\n                  Delete\n                </Button>\n              </ListElem>\n            );\n          })}\n        </List>\n      ) : (\n        <span>We didn't find this person</span>\n      )}\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport { Phonebook } from 'components/Phonebook/Phonebook';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <Phonebook />\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactsList />\n    </>\n  );\n}\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","StyledField","Field","_templateObject2","StyledErrorMessage","ErrorMessage","_templateObject3","Label","_templateObject4","Button","_templateObject5","selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","InputSchema","Yup","shape","min","max","matches","required","number","Phonebook","useSelector","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","find","c","alert","addContacts","resetForm","children","_jsxs","type","placeholder","component","Input","Filter","value","onChange","e","filterAction","target","List","ListElem","LoaderWrapper","Loader","MagnifyingGlass","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","ContactsList","visibleItems","_Fragment","length","map","_ref","id","onClick","deleteContact","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}